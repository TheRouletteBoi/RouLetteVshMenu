# Copyright (c) 2002 Trustees of Indiana University
#
# Distributed under the Boost Software License, Version 1.0.
# (See accompanying file LICENSE_1_0.txt or copy at
# http://www.boost.org/LICENSE_1_0.txt)

# Define SGB (stanford graph base top level directory) and 
# LEDA (also top level directory) at the command line of jam using -s

import modules ;

local optional_tests ;

path-constant PLANAR_INPUT_FILES : ./planar_input_graphs ;

path-constant CYCLE_RATIO_INPUT_FILE : ./cycle_ratio_s382.90.dot ;

if [ modules.peek : EXPAT_INCLUDE ] && [ modules.peek : EXPAT_LIBPATH ]
{
  optional_tests += [ run graphml_test.cpp ../build//boost_graph ] ;
}

test-suite graph_test : 

    [ run transitive_closure_test.cpp ]
             
    [ compile adj_list_cc.cpp ]

    # adj_list_test needs some work -JGS
    # unit-test adj_list_test : adj_list_test.cpp  ;

    [ run adj_list_edge_list_set.cpp ]

    [ compile adj_matrix_cc.cpp ]

    [ run bfs.cpp ../../test/build//boost_test_exec_monitor ]

    [ compile bfs_cc.cpp ]

    [ run bellman-test.cpp ]

    [ run betweenness_centrality_test.cpp ] 
    
    [ run bidir_remove_edge.cpp ]

    [ run csr_graph_test.cpp : : : : : <variant>release ]

    [ run dag_longest_paths.cpp ]

    [ run dfs.cpp ../../test/build//boost_test_exec_monitor ]

    [ compile dfs_cc.cpp ]

    [ compile dijkstra_cc.cpp ]

    [ run dijkstra_heap_performance.cpp : 10000 ]

    [ run dominator_tree_test.cpp ]

    [ run relaxed_heap_test.cpp : 5000 15000 ]

    [ compile edge_list_cc.cpp ]

    [ compile filtered_graph_cc.cpp ]

    [ run graph.cpp ]

    [ compile graph_concepts.cpp ]

    [ run graphviz_test.cpp 
            /boost/test//boost_test_exec_monitor/<link>static 
            ../build//boost_graph ]

    [ run gursoy_atun_layout_test.cpp ]

    [ run layout_test.cpp : : : <test-info>always_show_run_output <toolset>intel:<debug-symbols>off ]

    [ run serialize.cpp 
          ../../serialization/build//boost_serialization
      : : : ]

    [ compile reverse_graph_cc.cpp ] 

    [ run sequential_vertex_coloring.cpp ]

    [ run subgraph.cpp ../../test/build//boost_test_exec_monitor ]

    [ run isomorphism.cpp ../../test/build//boost_test_exec_monitor ]

    [ run adjacency_matrix_test.cpp ]    

    [ compile vector_graph_cc.cpp ]

    [ compile copy.cpp ]
    
    [ compile property_iter.cpp ]    

    [ run bundled_properties.cpp ]

    [ run floyd_warshall_test.cpp ]

    [ run astar_search_test.cpp ]

    [ run biconnected_components_test.cpp ]

    [ run cuthill_mckee_ordering.cpp ]

    [ run king_ordering.cpp ]

    [ run matching_test.cpp ]

    [ run max_flow_test.cpp ]

    [ run kolmogorov_max_flow_test.cpp ]

    [ run cycle_ratio_tests.cpp ../build//boost_graph : $(CYCLE_RATIO_INPUT_FILE) ]

    [ run basic_planarity_test.cpp ]

    [ run make_connected_test.cpp ]

    [ run make_bicon_planar_test.cpp ]

    [ run make_maximal_planar_test.cpp ]

    [ run all_planar_input_files_test.cpp 
        ../../filesystem/build 
        ../../system/build
        : $(PLANAR_INPUT_FILES) ]

    [ run parallel_edges_loops_test.cpp 
        ../../filesystem/build 
        ../../system/build
        : $(PLANAR_INPUT_FILES) ]

    $(optional_tests)
    ;

# Run SDB tests only when -sSDB= is set.
if [ modules.peek : SDB ] != ""
{
    local SDB_DEPENDCIES =
        <include>$(SGB) <library-file>$(SGB)/libgb.a  ;

    compile stanford_graph_cc.cpp 
        $(SDB_DEPENDCIES)  ;
}

# Run LEDA tests only when -sLEDA= is set.
if [ modules.peek : LEDA ] != ""
{
     local LEDA_DEPENDENCIES = 
        <include>$(LEDA)/incl 
        <library-file>$(LEDA)/libG.a
        ;

    compile leda_graph_cc.cpp  
       $(LEDA_DEPENDENCIES) ;
}
