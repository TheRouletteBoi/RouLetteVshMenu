#~ Copyright 2006-2007 Rene Rivera.
#~ Distributed under the Boost Software License, Version 1.0.
#~ (See accompanying file LICENSE_1_0.txt or http://www.boost.org/LICENSE_1_0.txt)

fail-count = 0 ;
pass-count = 0 ;

rule message ( message * )
{
    local b = [ BACKTRACE ] ;
    ECHO "$(b[-4]):$(b[-3]):" $(message) ;
}
rule fail ( message * )
{
    fail-count = [ CALC $(fail-count) + 1 ] ;
    message "error:" [FAILED] $(message) ;
}
rule pass ( message * )
{
    pass-count = [ CALC $(pass-count) + 1 ] ;
    if --verbose in $(ARGV)
    {
        message "info:" [PASSED] $(message) ;
    }
}
rule assert ( expected * : test ? : obtained * )
{
    test ?= "(==)" ;
    local r = 0 ;
    if $(test) = "(==)" && "*$(expected)*" != "*$(obtained)*"
    {
        fail '$(expected)' $(test) '$(obtained)' ;
    }
    else if $(test) = "(!=)" && "*$(expected)*" = "*$(obtained)*"
    {
        fail '$(expected)' $(test) '$(obtained)' ;
    }
    else
    {
        pass '$(expected)' $(test) '$(obtained)' ;
    }
}

include action_status.jam ;
include actions_quietly.jam ;
include builtin_shell.jam ;
include builtin_w32_getregnames.jam ;
include option_d2.jam ;
include option_l.jam ;
include option_n.jam ;
include parallel_actions.jam ;
include parallel_multifile_actions.jam ;
include stress_var_expand.jam ;
include target_var.jam ;
include var_expand.jam ;

EXIT --- Complete: PASSED($(pass-count)) *FAILED($(fail-count))* : $(fail-count) ;
